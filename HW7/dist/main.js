/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("(function () {\r\n    let state = undefined;\r\n    let searchString = undefined;\r\n    const URL = \"http://api.weatherapi.com/v1/current.json\"\r\n    const API_KEY = \"f8c3dc5311f44fd8a98141433231804\";\r\n    TAGS_CLASSES = {\r\n        \"health\": \"healthTag\",\r\n        \"home\": \"homeTag\",\r\n        \"work\": \"workTag\",\r\n        \"other\": \"otherTag\",\r\n    };\r\n\r\n    const apiClient = {\r\n        getTodos: async function() {\r\n            const response = await fetch('http://localhost:3004/tasks');\r\n            return response.json();\r\n        },\r\n        addTodo: async function(title, tag) {\r\n            const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ title, tag, isCompleted: false })\r\n            };\r\n            const response = await fetch('http://localhost:3004/tasks', requestOptions);\r\n            return response.json();\r\n        },\r\n        updateTodo: async function(id, item) {\r\n            const requestOptions = {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(item)\r\n            };\r\n            const response = await fetch(`http://localhost:3004/tasks/${id}`, requestOptions);\r\n        },\r\n        deleteTodo: async function(id) {\r\n            const requestOptions = {\r\n                method: 'DELETE'\r\n            };\r\n            const response = await fetch(`http://localhost:3004/tasks/${id}`, requestOptions);\r\n        }\r\n    };\r\n    /**\r\n     * Global application state\r\n     * @template T\r\n     * @param {T} initialValue\r\n     * @returns {[T, function(T): void]}\r\n     */\r\n    function useState(initialValue) {\r\n        state = state || initialValue;\r\n\r\n        function setValue(newValue) {\r\n            state = newValue;\r\n            renderApp();\r\n        }\r\n\r\n        return [state, setValue];\r\n    }\r\n\r\n    function useSearchString(initialValue) {\r\n        searchString = searchString || initialValue;\r\n\r\n        function setValue(newValue) {\r\n            searchString = newValue;\r\n            renderApp();\r\n        }\r\n        return [searchString, setValue];\r\n    }\r\n\r\n    /**\r\n     * Functional component for the list\r\n     * @param items {string[]}\r\n     * @returns {HTMLElement} - List element\r\n     */\r\n    function List({items, searchString, onDeleteTask, onCompleteTask}) {\r\n        const ul = document.createElement(\"ul\");\r\n        for (let item of items) {\r\n            if (searchString) {\r\n                if (item.title.includes(searchString)) {\r\n                    ul.append(ListElement({item,\r\n                        onDeleteTask: () => onDeleteTask(item.id),\r\n                        onCompleteTask: () => onCompleteTask(item.id)\r\n                        }))\r\n                }\r\n            } else {\r\n            ul.append(ListElement({item,\r\n                                   onDeleteTask: () => onDeleteTask(item.id),\r\n                                   onCompleteTask: () => onCompleteTask(item.id)\r\n                                   }));\r\n            }\r\n        }\r\n        return ul;\r\n    }\r\n\r\n    function ListElement({item, onDeleteTask, onCompleteTask}) {\r\n        let li = document.createElement(\"li\");\r\n        li.classList.add(\"taskElement\");\r\n        const deleteImage = document.createElement(\"span\");\r\n        deleteImage.innerHTML = '<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 2H8C8 1.44772 7.55228 1 7 1C6.44772 1 6 1.44772 6 2ZM5 2C5 0.89543 5.89543 0 7 0C8.10457 0 9 0.89543 9 2H13C13.2761 2 13.5 2.22386 13.5 2.5C13.5 2.77614 13.2761 3 13 3H12.4364L11.2313 11.8378C11.0624 13.0765 10.0044 14 8.75422 14H5.24578C3.99561 14 2.93762 13.0765 2.76871 11.8378L1.56355 3H1C0.723858 3 0.5 2.77614 0.5 2.5C0.5 2.22386 0.723858 2 1 2H5ZM6 5.5C6 5.22386 5.77614 5 5.5 5C5.22386 5 5 5.22386 5 5.5V10.5C5 10.7761 5.22386 11 5.5 11C5.77614 11 6 10.7761 6 10.5V5.5ZM8.5 5C8.77614 5 9 5.22386 9 5.5V10.5C9 10.7761 8.77614 11 8.5 11C8.22386 11 8 10.7761 8 10.5V5.5C8 5.22386 8.22386 5 8.5 5ZM3.75954 11.7027C3.86089 12.4459 4.49568 13 5.24578 13H8.75422C9.50432 13 10.1391 12.4459 10.2405 11.7027L11.4272 3H2.57281L3.75954 11.7027Z\"/></svg>'\r\n        deleteImage.classList.add(\"deleteImage\");\r\n        const deleteButton = Button({text: \"\", onClick: onDeleteTask});\r\n        deleteButton.append(deleteImage);\r\n        deleteButton.classList.add(\"deleteButton\");\r\n\r\n        const checkbox = document.createElement(\"img\");\r\n        checkbox.setAttribute(\"src\", \"static/checkboxTask.svg\");\r\n        checkbox.addEventListener(\"click\", onCompleteTask);\r\n        checkbox.classList.add(\"checkboxImg\");\r\n        let taskDiv = document.createElement(\"div\");\r\n        taskDiv.classList.add(\"taskDiv\");\r\n        let p = document.createElement(\"p\");\r\n        p.innerHTML = item.title;\r\n        p.classList.add('spanTask');\r\n        let tag = document.createElement(\"div\");\r\n        tag.classList.add(\"tag\");\r\n        tag.classList.add(TAGS_CLASSES[item.tag]);\r\n        tag.innerHTML = item.tag;\r\n        taskDiv.append(p, tag);\r\n\r\n        li.append(checkbox, taskDiv, deleteButton);\r\n        return li;\r\n    }\r\n\r\n    function DoneList({doneItems, searchString}) {\r\n        const ul = document.createElement(\"ul\");\r\n        for (let doneItem of doneItems) {\r\n            if (searchString) {\r\n                if (doneItem.title.includes(searchString)) {\r\n                    ul.append(DoneListElement({doneItem}));\r\n                };\r\n            } else {\r\n                ul.append(DoneListElement({doneItem}));\r\n            }\r\n        }\r\n        return ul;\r\n    }\r\n    \r\n    function DoneListElement({doneItem}) {\r\n        let li = document.createElement(\"li\");\r\n        li.classList.add(\"taskElement\");\r\n\r\n        const checkboxSVG = document.createElement(\"img\");\r\n        checkboxSVG.setAttribute(\"src\", \"static/checkboxDone.svg\");\r\n        checkboxSVG.classList.add(\"checkboxImg\");\r\n\r\n        let taskDiv = document.createElement(\"div\");\r\n        taskDiv.classList.add(\"taskDiv\");\r\n        let p = document.createElement(\"p\");\r\n        p.innerHTML = doneItem.title;\r\n        p.classList.add('spanDone');\r\n        let tag = document.createElement(\"div\");\r\n        tag.classList.add(\"tag\");\r\n        tag.classList.add(\"doneTag\");\r\n        tag.innerHTML = doneItem.tag;\r\n        taskDiv.append(p, tag);\r\n\r\n        li.append(checkboxSVG, taskDiv);\r\n        return li;\r\n    }\r\n\r\n    /**\r\n     * Button component\r\n     * @param text {string}\r\n     * @param onClick {function}\r\n     * @returns {HTMLButtonElement} - Button element\r\n     */\r\n    function Button({text, onClick}) {\r\n        const button = document.createElement(\"button\");\r\n        button.innerHTML = text;\r\n        button.onclick = onClick;\r\n        return button;\r\n    }\r\n\r\n    function SearchInput({searchString, placeholder, changeSearchString}) {\r\n        const searchInput = document.createElement(\"INPUT\");\r\n        searchInput.setAttribute(\"type\", \"text\");\r\n        searchInput.placeholder = placeholder;\r\n        searchInput.value = searchString;\r\n        searchInput.addEventListener(\"input\", () => changeSearchString());\r\n        return searchInput;\r\n    }\r\n\r\n    function TextInput({placeholder, onInput }) {\r\n        const textInput = document.createElement(\"INPUT\");\r\n        textInput.setAttribute(\"type\", \"text\");\r\n        textInput.placeholder = placeholder;\r\n        textInput.oninput = onInput;\r\n        return textInput;\r\n    }\r\n\r\n    function Form() {\r\n        const form = document.createElement(\"form\");\r\n        form.classList.add(\"form\");\r\n        const tags = [\"health\", \"work\", \"home\", \"other\"];\r\n\r\n        for (let tag of tags) {\r\n            const input = document.createElement(\"INPUT\");\r\n            input.type = \"radio\"; \r\n            input.setAttribute(\"value\", tag);\r\n            input.setAttribute(\"name\", \"tag\");\r\n            input.setAttribute( \"id\", tag);\r\n            if (tag === \"other\") {\r\n                input.checked = true;\r\n            }\r\n\r\n            const label = document.createElement(\"label\");\r\n            label.innerText = tag;\r\n            label.setAttribute(\"for\", tag);\r\n            label.classList.add(\"tag\");\r\n            label.classList.add(TAGS_CLASSES[tag]);\r\n\r\n            form.append(input, label)\r\n        }\r\n\r\n        return form; \r\n    }\r\n\r\n    function AddNewItemPopup({addItem, closePopup}) {\r\n        \r\n        function changeButtonColor() {\r\n            if (textInput.value !== '') {\r\n                addTaskButton.disabled = false;\r\n            };\r\n            if (textInput.value === '') {\r\n                addTaskButton.disabled = true;\r\n            }\r\n        }\r\n\r\n        function handleAddNewItem() {\r\n            const value = textInput.value;\r\n            let tag = \"other\";\r\n            const radioButtons = form.getElementsByTagName(\"input\");\r\n            for (let button of radioButtons) {\r\n                if (button.checked === true) {\r\n                    tag = button.id;\r\n                }\r\n            };\r\n            textInput.value = '';\r\n            addItem(value, tag);\r\n        }\r\n\r\n        function handleClosePopup() {\r\n            textInput.value = '';\r\n            addTaskButton.disabled = true;\r\n            closePopup();\r\n        }\r\n\r\n        const divPopup = document.createElement(\"div\");\r\n        divPopup.classList.add(\"divPopup\");\r\n        const popupHeader = document.createElement(\"h3\");\r\n        popupHeader.innerHTML = \"Add New Task\";\r\n        const divPopupButtons = document.createElement(\"div\");\r\n        divPopupButtons.classList.add(\"divPopupButtons\");\r\n\r\n        const textInput = TextInput({placeholder: \"New Task\", onInput: changeButtonColor});\r\n        textInput.classList.add(\"textInput\");\r\n\r\n        const addTaskButton = Button({text: \"Add\", onClick: handleAddNewItem});\r\n        addTaskButton.classList.add(\"popupSubmitButton\");\r\n        addTaskButton.disabled = true;\r\n        \r\n        const form = Form();\r\n\r\n        const closePopupButton = Button({text: \"Cancel\", onClick: handleClosePopup});\r\n        closePopupButton.classList.add(\"popupCancelButton\");\r\n        divPopupButtons.append(closePopupButton, addTaskButton);\r\n        divPopup.append(popupHeader, textInput, form, divPopupButtons);\r\n\r\n        const focus = () => {\r\n            textInput.focus();\r\n        }\r\n\r\n        return [divPopup, focus];\r\n    }\r\n\r\n    async function WeatherWidget() {\r\n        let coordinates = [41.716667, 44.783333];\r\n        function getCoordinates() {\r\n            return new Promise(function(resolve, reject) {\r\n              navigator.geolocation.getCurrentPosition(resolve, reject);\r\n            });\r\n        }       \r\n        if (\"geolocation\" in navigator) {\r\n            let position = await getCoordinates();\r\n            coordinates = [position.coords.latitude, position.coords.longitude];\r\n        }                                                                          \r\n        const coordinateString = `${coordinates[0]},${coordinates[1]}`\r\n        const query = `?key=${API_KEY}&q=${coordinateString}&aqi=no`;\r\n\r\n        const getWeather = async() => {\r\n            const response = await fetch(URL + query);\r\n            const data = await response.json();\r\n            return [data.current.temp_c, data.current.condition.icon, data.location.name];\r\n        } \r\n\r\n        const divWidget = document.createElement(\"div\");\r\n        divWidget.classList.add(\"divWidget\");\r\n        const weather = await getWeather();\r\n        const weatherSpan = document.createElement(\"span\");\r\n        weatherSpan.innerHTML = `${weather[0]}°`;\r\n        weatherSpan.classList.add(\"weather\");\r\n        const weatherIcon = document.createElement(\"img\");\r\n        weatherIcon.classList.add(\"weatherIcon\");\r\n        weatherIcon.setAttribute(\"src\", weather[1]);\r\n        const city = weather[2]; \r\n        const citySpan = document.createElement(\"span\");\r\n        citySpan.classList.add(\"city\");\r\n        citySpan.innerHTML = city;\r\n        divWidget.append(weatherIcon, weatherSpan, citySpan);\r\n        return divWidget;\r\n    }\r\n\r\n    /**\r\n     * App container\r\n     * @returns {HTMLDivElement} - The app container\r\n     */\r\n    async function AppHeader() {\r\n\r\n        const [_, setItems] = useState(await apiClient.getTodos());\r\n        const [searchString, setSearchString] = useSearchString('');\r\n\r\n        function changeSearchString() {\r\n            setSearchString(searchInput.value);\r\n        }\r\n\r\n        function addNewTask() {\r\n            popupOverlay.style.display = \"block\";\r\n            popupInputFocus();\r\n        }\r\n\r\n        async function addItem(text, tag) {\r\n            await apiClient.addTodo(text, tag);\r\n            const newItems = await apiClient.getTodos();\r\n            setItems(newItems);\r\n            closePopup();\r\n        }\r\n\r\n        function closePopup() {\r\n            popupOverlay.style.display = \"none\";\r\n        }\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.classList.add(\"divHeader\");\r\n        const divHeader = document.createElement(\"div\");\r\n        const newTaskButton = Button({text: \"+ New Task\", onClick: addNewTask});\r\n        newTaskButton.classList.add(\"buttonNewTask\");\r\n        const searchInput = SearchInput({searchString: searchString, placeholder: \"Search Task\", changeSearchString: changeSearchString});\r\n        searchInput.classList.add(\"searchInput\");\r\n        const header = document.createElement(\"h1\");\r\n        header.innerHTML = \"To Do List\";\r\n        const weatherWidget = await WeatherWidget();\r\n        const [popup, popupInputFocus] = AddNewItemPopup({addItem: addItem, \r\n                                                        closePopup: closePopup});\r\n\r\n        const popupOverlay = document.createElement(\"div\");\r\n        popupOverlay.classList.add(\"popupOverlay\");\r\n        popupOverlay.append(popup);\r\n        popupOverlay.style.display = \"none\"; \r\n        divHeader.append(header, weatherWidget);   \r\n        div.append(divHeader, searchInput, newTaskButton, popupOverlay);\r\n\r\n        return div;\r\n    }\r\n\r\n    async function App() {\r\n        const [items, setItems] = useState(await apiClient.getTodos());\r\n        const todoItems = items.filter(item => item.isCompleted === false);\r\n        const completedItems = items.filter(item => item.isCompleted === true);\r\n        const [searchString, setSearchString] = useSearchString('');\r\n\r\n        async function deleteTask(id) {\r\n            await apiClient.deleteTodo(id);\r\n            const newItems = await apiClient.getTodos();\r\n            setItems(newItems);\r\n        }\r\n\r\n        async function completeTask(id) {\r\n            const item = items.filter(item => item.id === id)[0];\r\n            item.isCompleted = true;\r\n            await apiClient.updateTodo(id, item);\r\n            const newItems = await apiClient.getTodos();\r\n            setItems(newItems);\r\n        }\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.classList.add(\"mainDiv\");\r\n        const listsDiv = document.createElement(\"div\");\r\n        listsDiv.classList.add(\"listsDiv\");\r\n        const list = List({items: todoItems, onDeleteTask: deleteTask, onCompleteTask: completeTask, searchString});\r\n        const doneList = DoneList({doneItems: completedItems, searchString});\r\n\r\n        const taskHeader = document.createElement(\"h3\");\r\n        taskHeader.innerHTML = \"All Tasks\";\r\n        const doneHeader = document.createElement(\"h3\");\r\n        doneHeader.innerHTML = \"Completed Tasks\";\r\n        listsDiv.append(taskHeader, list, doneHeader, doneList,);\r\n        \r\n        div.append(listsDiv,);\r\n        return div;\r\n    }\r\n\r\n    /**\r\n     * Render the app.\r\n     * On change whole app is re-rendered.\r\n     */\r\n    async function renderHeader(){\r\n        const appContainer = document.getElementById(\"functional-header\");\r\n        appContainer.innerHTML = \"\";\r\n        appContainer.append(await AppHeader());\r\n    }\r\n    async function renderApp() {\r\n        const appContainer = document.getElementById(\"functional-example\");\r\n        appContainer.innerHTML = \"\";\r\n        appContainer.append(await App());\r\n    }\r\n\r\n    // initial render\r\n    renderHeader();\r\n    renderApp();\r\n})();\n\n//# sourceURL=webpack://hw7/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;